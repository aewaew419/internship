#!/bin/bash

# University Deployment Script
# р╕кр╕Др╕гр╕┤р╕Ыр╕Хр╣Мр╕кр╕│р╕лр╕гр╕▒р╕Ъ deploy р╕гр╕░р╕Ър╕Ър╣Др╕Ыр╕вр╕▒р╕З server р╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕в

echo "ЁЯПЫя╕П University Deployment Script"
echo "================================"

# Configuration
read -p "ЁЯМР University domain (р╣Ар╕Кр╣Ир╕Щ university.ac.th): " UNIVERSITY_DOMAIN
read -p "ЁЯУб Server IP address: " SERVER_IP
read -p "ЁЯСд SSH username (default: root): " SSH_USER
SSH_USER=${SSH_USER:-root}
read -p "ЁЯФС SSH port (default: 22): " SSH_PORT
SSH_PORT=${SSH_PORT:-22}

# Subdomain options
echo ""
echo "ЁЯУЛ р╣Ар╕ер╕╖р╕нр╕Бр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ъ URL:"
echo "1. internship.$UNIVERSITY_DOMAIN"
echo "2. coop.$UNIVERSITY_DOMAIN"
echo "3. student-internship.$UNIVERSITY_DOMAIN"
echo "4. р╕Бр╕│р╕лр╕Щр╕Фр╣Ар╕нр╕З"
read -p "р╣Ар╕ер╕╖р╕нр╕Б (1-4): " URL_CHOICE

case $URL_CHOICE in
    1) SUBDOMAIN="internship.$UNIVERSITY_DOMAIN" ;;
    2) SUBDOMAIN="coop.$UNIVERSITY_DOMAIN" ;;
    3) SUBDOMAIN="student-internship.$UNIVERSITY_DOMAIN" ;;
    4) read -p "р╣Гр╕кр╣И subdomain: " SUBDOMAIN ;;
    *) SUBDOMAIN="internship.$UNIVERSITY_DOMAIN" ;;
esac

echo ""
echo "ЁЯУК р╕кр╕гр╕╕р╕Ыр╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓:"
echo "   Server: $SERVER_IP"
echo "   Domain: $SUBDOMAIN"
echo "   SSH: $SSH_USER@$SERVER_IP:$SSH_PORT"
echo ""
read -p "р╕вр╕╖р╕Щр╕вр╕▒р╕Щр╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓? (y/N): " CONFIRM

if [[ ! $CONFIRM =~ ^[Yy]$ ]]; then
    echo "тЭМ р╕вр╕Бр╣Ар╕ер╕┤р╕Бр╕Бр╕▓р╕г deploy"
    exit 1
fi

# Test SSH connection
echo "ЁЯФН р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕н SSH..."
if ! ssh -o ConnectTimeout=10 -p "$SSH_PORT" "$SSH_USER@$SERVER_IP" "echo 'SSH OK'"; then
    echo "тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕н SSH р╣Др╕Фр╣Й"
    echo "ЁЯТб р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ:"
    echo "   - SSH key р╕лр╕гр╕╖р╕н password"
    echo "   - Server IP р╣Бр╕ер╕░ port"
    echo "   - Firewall settings"
    exit 1
fi

echo "тЬЕ SSH connection OK"

# Create deployment package
echo "ЁЯУж р╣Ар╕Хр╕гр╕╡р╕вр╕бр╣Др╕Яр╕ер╣Мр╕кр╕│р╕лр╕гр╕▒р╕Ъ deployment..."
tar -czf internship-deployment.tar.gz \
    --exclude=node_modules \
    --exclude=.git \
    --exclude=.next \
    --exclude=dist \
    --exclude=build \
    .

# Create deployment script for server
cat > /tmp/university_deploy.sh << EOF
#!/bin/bash

echo "ЁЯПЫя╕П р╣Ар╕гр╕┤р╣Ир╕б University Deployment..."

# Update system
echo "ЁЯУж р╕нр╕▒р╕Юр╣Ар╕Фр╕Чр╕гр╕░р╕Ър╕Ъ..."
apt update && apt upgrade -y

# Install Docker
if ! command -v docker &> /dev/null; then
    echo "ЁЯР│ р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З Docker..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
    systemctl enable docker
    systemctl start docker
fi

# Install Docker Compose
if ! command -v docker-compose &> /dev/null; then
    echo "ЁЯФз р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З Docker Compose..."
    curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-\$(uname -s)-\$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
fi

# Create application directory
echo "ЁЯУБ р╕кр╕гр╣Йр╕▓р╕З directory..."
mkdir -p /opt/internship-system
cd /opt/internship-system

# Extract deployment files
echo "ЁЯУд р╣Бр╕Хр╕Бр╣Др╕Яр╕ер╣М..."
tar -xzf /tmp/internship-deployment.tar.gz

# Create environment file
echo "тЪЩя╕П р╕кр╕гр╣Йр╕▓р╕З environment file..."
cat > .env.production << 'ENVEOF'
NODE_ENV=production
GO_ENV=production
DOMAIN=$SUBDOMAIN
DB_NAME=internship_prod
DB_USER=internship_user
DB_PASSWORD=\$(openssl rand -base64 32)
JWT_SECRET=\$(openssl rand -base64 64)
JWT_EXPIRES_IN=24h
REDIS_PASSWORD=\$(openssl rand -base64 32)
CORS_ORIGIN=https://$SUBDOMAIN
RATE_LIMIT=100
LOG_LEVEL=info
GRAFANA_PASSWORD=admin123
SMTP_HOST=smtp.$UNIVERSITY_DOMAIN
SMTP_PORT=587
ENVEOF

# Install SSL certificate
echo "ЁЯФР р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З SSL certificate..."
if command -v certbot &> /dev/null; then
    certbot certonly --standalone -d $SUBDOMAIN --non-interactive --agree-tos --email admin@$UNIVERSITY_DOMAIN
    
    # Copy certificates
    mkdir -p deployment/nginx/ssl
    cp /etc/letsencrypt/live/$SUBDOMAIN/fullchain.pem deployment/nginx/ssl/cert.pem
    cp /etc/letsencrypt/live/$SUBDOMAIN/privkey.pem deployment/nginx/ssl/key.pem
else
    echo "тЪая╕П Certbot р╣Др╕бр╣Ир╕Юр╕Ъ - р╕кр╕гр╣Йр╕▓р╕З self-signed certificate"
    mkdir -p deployment/nginx/ssl
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout deployment/nginx/ssl/key.pem \
        -out deployment/nginx/ssl/cert.pem \
        -subj "/C=TH/ST=Bangkok/L=Bangkok/O=$UNIVERSITY_DOMAIN/CN=$SUBDOMAIN"
fi

# Configure Nginx
echo "ЁЯМР р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ Nginx..."
cat > deployment/nginx/nginx.conf << 'NGINXEOF'
events {
    worker_connections 1024;
}

http {
    upstream backend {
        server backend:8080;
    }
    
    upstream frontend {
        server frontend:3000;
    }
    
    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name $SUBDOMAIN;
        return 301 https://\$server_name\$request_uri;
    }
    
    # HTTPS server
    server {
        listen 443 ssl http2;
        server_name $SUBDOMAIN;
        
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_private_key /etc/nginx/ssl/key.pem;
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
        
        # API routes
        location /api/ {
            proxy_pass http://backend;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
        }
        
        # Health check
        location /health {
            proxy_pass http://backend;
            proxy_set_header Host \$host;
        }
        
        # Frontend
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
        }
    }
}
NGINXEOF

# Configure firewall
echo "ЁЯФе р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ firewall..."
ufw --force reset
ufw default deny incoming
ufw default allow outgoing
ufw allow ssh
ufw allow 80/tcp
ufw allow 443/tcp
ufw --force enable

# Deploy application
echo "ЁЯЪА Deploy application..."
docker-compose -f deployment/docker-compose.prod.yml --env-file .env.production up -d

# Wait for services
echo "тП│ р╕гр╕нр╣Гр╕лр╣Й services р╣Ар╕гр╕┤р╣Ир╕бр╕Чр╕│р╕Зр╕▓р╕Щ..."
sleep 60

# Check status
echo "ЁЯУК р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕Цр╕▓р╕Щр╕░..."
docker-compose -f deployment/docker-compose.prod.yml --env-file .env.production ps

# Test endpoints
echo "ЁЯзк р╕Чр╕Фр╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ъ..."
curl -k -I https://localhost/health || echo "Health check failed"

# Setup auto-renewal for SSL
echo "ЁЯФД р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ SSL auto-renewal..."
(crontab -l 2>/dev/null; echo "0 12 * * * /usr/bin/certbot renew --quiet --deploy-hook 'cd /opt/internship-system && docker-compose -f deployment/docker-compose.prod.yml restart nginx'") | crontab -

# Setup backup
echo "ЁЯТ╛ р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ backup..."
mkdir -p /opt/internship-system/backups
cat > /opt/internship-system/backup.sh << 'BACKUPEOF'
#!/bin/bash
DATE=\$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/opt/internship-system/backups"
docker exec internship_db pg_dump -U internship_user internship_prod | gzip > "\$BACKUP_DIR/db_backup_\$DATE.sql.gz"
find "\$BACKUP_DIR" -name "db_backup_*.sql.gz" -mtime +7 -delete
BACKUPEOF

chmod +x /opt/internship-system/backup.sh
(crontab -l 2>/dev/null; echo "0 2 * * * /opt/internship-system/backup.sh") | crontab -

echo "тЬЕ University deployment р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ!"
echo ""
echo "ЁЯМР URLs:"
echo "   https://$SUBDOMAIN"
echo ""
echo "ЁЯФС Default Admin:"
echo "   Email: admin@$UNIVERSITY_DOMAIN"
echo "   Password: admin123"
echo ""
echo "ЁЯУЛ Next Steps:"
echo "   1. р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ DNS A record: $SUBDOMAIN -> $SERVER_IP"
echo "   2. р╕Чр╕Фр╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ъ"
echo "   3. р╕кр╕гр╣Йр╕▓р╕З user accounts"
echo "   4. р╕нр╕Ър╕гр╕бр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ"
EOF

# Upload and execute deployment
echo "ЁЯУд р╕нр╕▒р╕Юр╣Вр╕лр╕ер╕Фр╣Др╕Яр╕ер╣Мр╣Др╕Ыр╕вр╕▒р╕З server..."
scp -P "$SSH_PORT" internship-deployment.tar.gz "$SSH_USER@$SERVER_IP:/tmp/"
scp -P "$SSH_PORT" /tmp/university_deploy.sh "$SSH_USER@$SERVER_IP:/tmp/"

echo "ЁЯЪА р╣Ар╕гр╕┤р╣Ир╕б deployment р╕Ър╕Щ server..."
ssh -p "$SSH_PORT" "$SSH_USER@$SERVER_IP" "chmod +x /tmp/university_deploy.sh && /tmp/university_deploy.sh"

# Cleanup
rm -f internship-deployment.tar.gz /tmp/university_deploy.sh

echo ""
echo "ЁЯОЙ Deployment р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ!"
echo ""
echo "ЁЯУЛ р╕кр╕┤р╣Ир╕Зр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Чр╕│р╕Хр╣Ир╕н:"
echo ""
echo "1. ЁЯМР р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ DNS:"
echo "   р╣Ар╕Юр╕┤р╣Ир╕б A record: $SUBDOMAIN -> $SERVER_IP"
echo ""
echo "2. ЁЯзк р╕Чр╕Фр╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ъ:"
echo "   https://$SUBDOMAIN"
echo ""
echo "3. ЁЯСе р╕кр╕гр╣Йр╕▓р╕З user accounts:"
echo "   Login р╕Фр╣Йр╕зр╕в admin@$UNIVERSITY_DOMAIN / admin123"
echo ""
echo "4. ЁЯУЪ р╕нр╕Ър╕гр╕бр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ"
echo ""
echo "5. ЁЯУЮ р╕Хр╕┤р╕Фр╕Хр╣Ир╕н IT support р╕лр╕▓р╕Бр╕бр╕╡р╕Ыр╕▒р╕Нр╕лр╕▓"
echo ""
echo "тЬЕ р╕гр╕░р╕Ър╕Ър╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ!"