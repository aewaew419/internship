#!/bin/bash

# Pre-deployment Check Script
# ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡πà‡∏≠‡∏ô deploy

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

echo -e "${PURPLE}üîç Pre-deployment Check${NC}"
echo -e "${PURPLE}=====================${NC}"
echo ""

# Check local requirements
check_local_requirements() {
    echo -e "${BLUE}üìã ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á local...${NC}"
    
    local all_good=true
    
    # Check Git
    if command -v git &> /dev/null; then
        echo -e "${GREEN}‚úÖ Git: $(git --version)${NC}"
    else
        echo -e "${RED}‚ùå Git: ‡πÑ‡∏°‡πà‡∏û‡∏ö${NC}"
        all_good=false
    fi
    
    # Check SSH
    if command -v ssh &> /dev/null; then
        echo -e "${GREEN}‚úÖ SSH: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô${NC}"
    else
        echo -e "${RED}‚ùå SSH: ‡πÑ‡∏°‡πà‡∏û‡∏ö${NC}"
        all_good=false
    fi
    
    # Check if we're in the right directory
    if [[ -f "package.json" && -f "go.mod" ]]; then
        echo -e "${GREEN}‚úÖ Project Directory: ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á${NC}"
    else
        echo -e "${RED}‚ùå Project Directory: ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà root directory ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ${NC}"
        all_good=false
    fi
    
    # Check Git status
    if git status &> /dev/null; then
        if [[ -z $(git status --porcelain) ]]; then
            echo -e "${GREEN}‚úÖ Git Status: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà commit${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Git Status: ‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà commit${NC}"
            git status --short
        fi
        
        # Check if we're on main branch
        current_branch=$(git branch --show-current)
        if [[ "$current_branch" == "main" ]]; then
            echo -e "${GREEN}‚úÖ Git Branch: ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô main branch${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Git Branch: ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô $current_branch (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ switch ‡πÑ‡∏õ main)${NC}"
        fi
        
        # Check if local is up to date with remote
        git fetch origin main &> /dev/null
        if [[ $(git rev-parse HEAD) == $(git rev-parse origin/main) ]]; then
            echo -e "${GREEN}‚úÖ Git Sync: local ‡πÅ‡∏•‡∏∞ remote sync ‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Git Sync: local ‡πÅ‡∏•‡∏∞ remote ‡πÑ‡∏°‡πà sync ‡∏Å‡∏±‡∏ô${NC}"
            echo "   Local commits ahead: $(git rev-list --count origin/main..HEAD)"
            echo "   Remote commits ahead: $(git rev-list --count HEAD..origin/main)"
        fi
    else
        echo -e "${RED}‚ùå Git Repository: ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà git repository${NC}"
        all_good=false
    fi
    
    echo ""
    if $all_good; then
        return 0
    else
        return 1
    fi
}

# Check project structure
check_project_structure() {
    echo -e "${BLUE}üìÅ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ...${NC}"
    
    local all_good=true
    
    # Required files and directories
    local required_items=(
        "apps/frontend"
        "apps/backend"
        "deployment/docker-compose.prod.yml"
        "deployment/nginx/nginx.conf"
        "deployment/database/init.sql"
        "scripts/deploy-production.sh"
        "deploy-to-hostatom.sh"
    )
    
    for item in "${required_items[@]}"; do
        if [[ -e "$item" ]]; then
            echo -e "${GREEN}‚úÖ $item${NC}"
        else
            echo -e "${RED}‚ùå $item: ‡πÑ‡∏°‡πà‡∏û‡∏ö${NC}"
            all_good=false
        fi
    done
    
    # Check Dockerfiles
    if [[ -f "apps/frontend/Dockerfile.prod" ]]; then
        echo -e "${GREEN}‚úÖ Frontend Dockerfile.prod${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Frontend Dockerfile.prod: ‡πÑ‡∏°‡πà‡∏û‡∏ö (‡∏à‡∏∞‡πÉ‡∏ä‡πâ Dockerfile ‡∏õ‡∏Å‡∏ï‡∏¥)${NC}"
    fi
    
    if [[ -f "apps/backend/Dockerfile.prod" ]]; then
        echo -e "${GREEN}‚úÖ Backend Dockerfile.prod${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Backend Dockerfile.prod: ‡πÑ‡∏°‡πà‡∏û‡∏ö (‡∏à‡∏∞‡πÉ‡∏ä‡πâ Dockerfile ‡∏õ‡∏Å‡∏ï‡∏¥)${NC}"
    fi
    
    echo ""
    if $all_good; then
        return 0
    else
        return 1
    fi
}

# Check environment files
check_environment_files() {
    echo -e "${BLUE}üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå environment...${NC}"
    
    # Check if there are any .env files that might conflict
    if ls .env* 1> /dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå .env ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ:${NC}"
        ls -la .env*
        echo "   ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÉ‡∏ô production"
    else
        echo -e "${GREEN}‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå .env ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á${NC}"
    fi
    
    # Check .gitignore
    if [[ -f ".gitignore" ]]; then
        if grep -q ".env" .gitignore; then
            echo -e "${GREEN}‚úÖ .gitignore: ‡∏°‡∏µ‡∏Å‡∏≤‡∏£ ignore ‡πÑ‡∏ü‡∏•‡πå .env${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  .gitignore: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£ ignore ‡πÑ‡∏ü‡∏•‡πå .env${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  .gitignore: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå${NC}"
    fi
    
    echo ""
}

# Check dependencies
check_dependencies() {
    echo -e "${BLUE}üì¶ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies...${NC}"
    
    # Check frontend dependencies
    if [[ -f "apps/frontend/package.json" ]]; then
        echo -e "${GREEN}‚úÖ Frontend package.json ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß${NC}"
        
        cd apps/frontend
        if [[ -f "package-lock.json" ]]; then
            echo -e "${GREEN}‚úÖ Frontend package-lock.json ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Frontend package-lock.json: ‡πÑ‡∏°‡πà‡∏û‡∏ö${NC}"
        fi
        cd ../..
    else
        echo -e "${RED}‚ùå Frontend package.json: ‡πÑ‡∏°‡πà‡∏û‡∏ö${NC}"
    fi
    
    # Check backend dependencies
    if [[ -f "apps/backend/go.mod" ]]; then
        echo -e "${GREEN}‚úÖ Backend go.mod ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß${NC}"
        
        if [[ -f "apps/backend/go.sum" ]]; then
            echo -e "${GREEN}‚úÖ Backend go.sum ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Backend go.sum: ‡πÑ‡∏°‡πà‡∏û‡∏ö${NC}"
        fi
    else
        echo -e "${RED}‚ùå Backend go.mod: ‡πÑ‡∏°‡πà‡∏û‡∏ö${NC}"
    fi
    
    echo ""
}

# Check Docker configuration
check_docker_config() {
    echo -e "${BLUE}üê≥ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Docker configuration...${NC}"
    
    # Check docker-compose.prod.yml
    if [[ -f "deployment/docker-compose.prod.yml" ]]; then
        echo -e "${GREEN}‚úÖ docker-compose.prod.yml ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß${NC}"
        
        # Basic syntax check
        if command -v docker-compose &> /dev/null; then
            if docker-compose -f deployment/docker-compose.prod.yml config &> /dev/null; then
                echo -e "${GREEN}‚úÖ docker-compose.prod.yml: syntax ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á${NC}"
            else
                echo -e "${RED}‚ùå docker-compose.prod.yml: syntax ‡∏ú‡∏¥‡∏î${NC}"
            fi
        else
            echo -e "${YELLOW}‚ö†Ô∏è  docker-compose ‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö syntax${NC}"
        fi
    else
        echo -e "${RED}‚ùå docker-compose.prod.yml: ‡πÑ‡∏°‡πà‡∏û‡∏ö${NC}"
    fi
    
    # Check nginx config
    if [[ -f "deployment/nginx/nginx.conf" ]]; then
        echo -e "${GREEN}‚úÖ nginx.conf ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß${NC}"
    else
        echo -e "${RED}‚ùå nginx.conf: ‡πÑ‡∏°‡πà‡∏û‡∏ö${NC}"
    fi
    
    echo ""
}

# Check deployment scripts
check_deployment_scripts() {
    echo -e "${BLUE}üöÄ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö deployment scripts...${NC}"
    
    local scripts=(
        "deploy-to-hostatom.sh"
        "scripts/deploy-production.sh"
        "push-both-repos.sh"
        "commit-and-push-both.sh"
    )
    
    for script in "${scripts[@]}"; do
        if [[ -f "$script" ]]; then
            if [[ -x "$script" ]]; then
                echo -e "${GREEN}‚úÖ $script: ‡∏û‡∏ö‡πÅ‡∏•‡∏∞ executable${NC}"
            else
                echo -e "${YELLOW}‚ö†Ô∏è  $script: ‡∏û‡∏ö‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà executable${NC}"
                echo "   ‡∏£‡∏±‡∏ô: chmod +x $script"
            fi
        else
            echo -e "${RED}‚ùå $script: ‡πÑ‡∏°‡πà‡∏û‡∏ö${NC}"
        fi
    done
    
    echo ""
}

# Security check
security_check() {
    echo -e "${BLUE}üîí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢...${NC}"
    
    # Check for sensitive files
    local sensitive_patterns=(
        "*.key"
        "*.pem"
        "*.p12"
        "*.jks"
        "*password*"
        "*secret*"
    )
    
    echo "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç..."
    local found_sensitive=false
    
    for pattern in "${sensitive_patterns[@]}"; do
        if ls $pattern 1> /dev/null 2>&1; then
            echo -e "${YELLOW}‚ö†Ô∏è  ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: $pattern${NC}"
            found_sensitive=true
        fi
    done
    
    if ! $found_sensitive; then
        echo -e "${GREEN}‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç${NC}"
    fi
    
    # Check .gitignore for common sensitive patterns
    if [[ -f ".gitignore" ]]; then
        local ignored_patterns=("*.env" "*.key" "*.pem" "node_modules" ".DS_Store")
        local missing_patterns=()
        
        for pattern in "${ignored_patterns[@]}"; do
            if ! grep -q "$pattern" .gitignore; then
                missing_patterns+=("$pattern")
            fi
        done
        
        if [[ ${#missing_patterns[@]} -eq 0 ]]; then
            echo -e "${GREEN}‚úÖ .gitignore: ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏° patterns ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  .gitignore: ‡∏Ç‡∏≤‡∏î patterns: ${missing_patterns[*]}${NC}"
        fi
    fi
    
    echo ""
}

# Performance check
performance_check() {
    echo -e "${BLUE}‚ö° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö performance considerations...${NC}"
    
    # Check file sizes
    echo "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠ performance..."
    
    # Check for large files
    large_files=$(find . -type f -size +10M -not -path "./node_modules/*" -not -path "./.git/*" 2>/dev/null || true)
    
    if [[ -n "$large_files" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà (>10MB):${NC}"
        echo "$large_files" | while read -r file; do
            size=$(du -h "$file" | cut -f1)
            echo "   $file ($size)"
        done
    else
        echo -e "${GREEN}‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠ performance${NC}"
    fi
    
    # Check node_modules size (if exists)
    if [[ -d "node_modules" ]]; then
        node_modules_size=$(du -sh node_modules 2>/dev/null | cut -f1)
        echo -e "${YELLOW}‚ÑπÔ∏è  node_modules size: $node_modules_size${NC}"
        echo "   ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: node_modules ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å copy ‡πÑ‡∏õ production"
    fi
    
    echo ""
}

# Generate deployment summary
generate_summary() {
    echo -e "${PURPLE}üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö${NC}"
    echo -e "${PURPLE}==================${NC}"
    echo ""
    
    echo -e "${CYAN}‚úÖ ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß:${NC}"
    echo "   ‚Ä¢ Git repository ‡πÅ‡∏•‡∏∞ remote sync"
    echo "   ‚Ä¢ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"
    echo "   ‚Ä¢ Docker configuration files"
    echo "   ‚Ä¢ Deployment scripts"
    echo ""
    
    echo -e "${CYAN}üìù ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:${NC}"
    echo "   1. ‡∏£‡∏±‡∏ô: ./deploy-to-hostatom.sh"
    echo "   2. ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• VPS (IP, domain, SSH user)"
    echo "   3. ‡∏£‡∏≠‡πÉ‡∏´‡πâ deployment ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"
    echo "   4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ó‡∏µ‡πà domain ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"
    echo ""
    
    echo -e "${CYAN}üîß ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°:${NC}"
    echo "   ‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• VPS (IP, SSH access)"
    echo "   ‚Ä¢ Domain name ‡∏ó‡∏µ‡πà‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á VPS ‡πÅ‡∏•‡πâ‡∏ß"
    echo "   ‚Ä¢ Email ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SSL certificate"
    echo ""
    
    echo -e "${YELLOW}‚ö†Ô∏è  ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:${NC}"
    echo "   ‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ DNS ‡πÑ‡∏î‡πâ propagate ‡πÅ‡∏•‡πâ‡∏ß"
    echo "   ‚Ä¢ VPS ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ RAM ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2GB"
    echo "   ‚Ä¢ Port 80, 443, 22 ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà"
    echo "   ‚Ä¢ SSH key ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á VPS ‡πÑ‡∏î‡πâ"
    echo ""
}

# Main function
main() {
    local overall_status=true
    
    if ! check_local_requirements; then
        overall_status=false
    fi
    
    if ! check_project_structure; then
        overall_status=false
    fi
    
    check_environment_files
    check_dependencies
    check_docker_config
    check_deployment_scripts
    security_check
    performance_check
    
    if $overall_status; then
        echo -e "${GREEN}üéâ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö deployment!${NC}"
        generate_summary
    else
        echo -e "${RED}‚ùå ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡πà‡∏≠‡∏ô deployment${NC}"
        echo "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ ‚ùå ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ deploy"
        exit 1
    fi
}

# Run main function
main "$@"