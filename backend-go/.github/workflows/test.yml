name: Go Backend Test Suite

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend-go/**'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend-go/**'
      - '.github/workflows/test.yml'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: [1.21, 1.22]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: internship_test_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Install dependencies
      working-directory: ./backend-go
      run: |
        go mod download
        go mod verify

    - name: Install test tools
      run: |
        go install github.com/jstemmer/go-junit-report@latest
        go install github.com/axw/gocov/gocov@latest
        go install github.com/AlekSi/gocov-xml@latest

    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P3306 -uroot -prootpassword --silent; do
          sleep 1
        done

    - name: Set up test environment
      working-directory: ./backend-go
      run: |
        mkdir -p coverage test-reports
        cp .env.example .env.test
        echo "DATABASE_URL=root:rootpassword@tcp(localhost:3306)/internship_test_db?charset=utf8mb4&parseTime=True&loc=Local" >> .env.test
        echo "JWT_SECRET=test-jwt-secret-key-for-ci" >> .env.test
        echo "ENVIRONMENT=test" >> .env.test

    - name: Run linting
      working-directory: ./backend-go
      run: |
        go vet ./...
        go fmt ./...
        # Install and run golangci-lint if available
        if command -v golangci-lint >/dev/null 2>&1; then
          golangci-lint run
        fi

    - name: Run unit tests
      working-directory: ./backend-go
      run: |
        go test -race -timeout 30m -coverprofile=coverage/unit_coverage.out \
          -v ./tests/unit/... ./internal/services/... ./internal/middleware/... ./internal/models/... \
          2>&1 | tee test-reports/unit_tests.txt

    - name: Run integration tests
      working-directory: ./backend-go
      env:
        DATABASE_URL: root:rootpassword@tcp(localhost:3306)/internship_test_db?charset=utf8mb4&parseTime=True&loc=Local
        JWT_SECRET: test-jwt-secret-key-for-ci
        ENVIRONMENT: test
      run: |
        go test -race -timeout 30m -coverprofile=coverage/integration_coverage.out \
          -v ./tests/integration/... ./tests/... \
          2>&1 | tee test-reports/integration_tests.txt

    - name: Run performance tests
      working-directory: ./backend-go
      env:
        DATABASE_URL: root:rootpassword@tcp(localhost:3306)/internship_test_db?charset=utf8mb4&parseTime=True&loc=Local
        JWT_SECRET: test-jwt-secret-key-for-ci
        ENVIRONMENT: test
      run: |
        go test -timeout 30m -coverprofile=coverage/performance_coverage.out \
          -v ./tests/performance/... \
          2>&1 | tee test-reports/performance_tests.txt

    - name: Generate comprehensive coverage
      working-directory: ./backend-go
      run: |
        go test -race -timeout 30m -coverprofile=coverage/coverage.out ./...
        go tool cover -func=coverage/coverage.out > coverage/coverage_func.txt
        go tool cover -html=coverage/coverage.out -o coverage/coverage.html

    - name: Generate JUnit reports
      working-directory: ./backend-go
      run: |
        # Convert test output to JUnit format
        if [ -f test-reports/unit_tests.txt ]; then
          cat test-reports/unit_tests.txt | go-junit-report > test-reports/unit_junit.xml
        fi
        if [ -f test-reports/integration_tests.txt ]; then
          cat test-reports/integration_tests.txt | go-junit-report > test-reports/integration_junit.xml
        fi

    - name: Check coverage threshold
      working-directory: ./backend-go
      run: |
        COVERAGE=$(go tool cover -func=coverage/coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Coverage: ${COVERAGE}%"
        THRESHOLD=70
        if (( $(echo "$COVERAGE >= $THRESHOLD" | bc -l) )); then
          echo "✅ Coverage meets threshold: ${COVERAGE}% >= ${THRESHOLD}%"
        else
          echo "❌ Coverage below threshold: ${COVERAGE}% < ${THRESHOLD}%"
          exit 1
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend-go/coverage/coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-go${{ matrix.go-version }}
        path: |
          backend-go/coverage/
          backend-go/test-reports/

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-reports-go${{ matrix.go-version }}
        path: |
          backend-go/coverage/coverage.html
          backend-go/coverage/coverage_func.txt

  benchmark:
    name: Benchmark Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-benchmark-${{ hashFiles('**/go.sum') }}

    - name: Run benchmarks
      working-directory: ./backend-go
      run: |
        mkdir -p benchmark-results
        go test -bench=. -benchmem -run=^$ ./... > benchmark-results/benchmarks.txt 2>&1

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: backend-go/benchmark-results/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec-results.sarif ./backend-go/...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec-results.sarif

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22

    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: backend-go

    - name: Run go mod tidy check
      working-directory: ./backend-go
      run: |
        go mod tidy
        git diff --exit-code go.mod go.sum

    - name: Check for vulnerabilities
      working-directory: ./backend-go
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      working-directory: ./backend-go
      run: |
        if [ -f Dockerfile ]; then
          docker build -t backend-go:test .
          echo "✅ Docker build successful"
        else
          echo "⚠️ Dockerfile not found, skipping Docker build"
        fi

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test, benchmark, security, quality]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate test summary
      run: |
        echo "# Test Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.test.result }}" == "success" ]; then
          echo "✅ **Unit & Integration Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Unit & Integration Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.benchmark.result }}" == "success" ]; then
          echo "✅ **Benchmark Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Benchmark Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.security.result }}" == "success" ]; then
          echo "✅ **Security Scan**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Security Scan**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.quality.result }}" == "success" ]; then
          echo "✅ **Code Quality**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Code Quality**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Artifacts Generated" >> $GITHUB_STEP_SUMMARY
        echo "- Test Results and Coverage Reports" >> $GITHUB_STEP_SUMMARY
        echo "- Benchmark Results" >> $GITHUB_STEP_SUMMARY
        echo "- Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Check the **Actions** tab for detailed reports and artifacts." >> $GITHUB_STEP_SUMMARY