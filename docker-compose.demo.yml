version: '3.8'

services:
  # PostgreSQL Database for Demo
  postgres_demo:
    image: postgres:15-alpine
    container_name: internship_demo_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: internship_demo
      POSTGRES_USER: demo_user
      POSTGRES_PASSWORD: demo_password_123
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_demo_data:/var/lib/postgresql/data
      - ./apps/backend/demo_data.json:/docker-entrypoint-initdb.d/demo_data.json:ro
    networks:
      - internship_demo_network
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U demo_user -d internship_demo"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API for Demo
  backend_demo:
    build:
      context: ./backend-go
      dockerfile: Dockerfile.prod
    container_name: internship_demo_backend
    restart: unless-stopped
    environment:
      - GO_ENV=production
      - PORT=8080
      - DB_HOST=postgres_demo
      - DB_PORT=5432
      - DB_NAME=internship_demo
      - DB_USER=demo_user
      - DB_PASSWORD=demo_password_123
      - JWT_SECRET=demo_jwt_secret_key_for_presentation_only_not_secure
      - JWT_EXPIRES_IN=24h
      - CORS_ORIGIN=*
      - LOG_LEVEL=info
    volumes:
      - ./logs/demo:/app/logs
    depends_on:
      postgres_demo:
        condition: service_healthy
    networks:
      - internship_demo_network
    ports:
      - "8081:8080"  # Different port for demo
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend for Demo
  frontend_demo:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile.prod
      args:
        - REACT_APP_API_URL=http://localhost:8081/api
        - REACT_APP_ENVIRONMENT=demo
    container_name: internship_demo_frontend
    restart: unless-stopped
    networks:
      - internship_demo_network
    ports:
      - "3001:3000"  # Different port for demo
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Demo
  redis_demo:
    image: redis:7-alpine
    container_name: internship_demo_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_demo_data:/data
    networks:
      - internship_demo_network
    ports:
      - "6380:6379"  # Different port for demo
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx for Demo (Optional - for full production simulation)
  nginx_demo:
    image: nginx:alpine
    container_name: internship_demo_nginx
    restart: unless-stopped
    ports:
      - "8080:80"  # Demo port
    volumes:
      - ./deployment/nginx/demo.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      backend_demo:
        condition: service_healthy
      frontend_demo:
        condition: service_healthy
    networks:
      - internship_demo_network
    profiles:
      - full-demo

volumes:
  postgres_demo_data:
  redis_demo_data:

networks:
  internship_demo_network:
    driver: bridge