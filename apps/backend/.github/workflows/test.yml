name: Backend Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/backend/**'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'apps/backend/**'
      - '.github/workflows/test.yml'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: [1.21, 1.22]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: testdb
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpassword
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Install dependencies
      working-directory: apps/backend
      run: |
        go mod download
        go mod verify

    - name: Install test tools
      run: |
        go install github.com/jstemmer/go-junit-report@latest
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

    - name: Set up test environment
      working-directory: apps/backend
      run: |
        cp .env.example .env
        echo "DATABASE_URL=mysql://testuser:testpassword@localhost:3306/testdb" >> .env
        echo "JWT_SECRET=test-jwt-secret-for-ci" >> .env
        echo "ENVIRONMENT=test" >> .env

    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P3306 -utestuser -ptestpassword --silent; do
          sleep 1
        done

    - name: Run linting
      working-directory: apps/backend
      run: |
        golangci-lint run --timeout=5m

    - name: Run unit tests
      working-directory: apps/backend
      run: |
        mkdir -p coverage
        go test -race -timeout=10m -coverprofile=coverage/unit_coverage.out -covermode=atomic -v ./tests/unit/...

    - name: Run integration tests
      working-directory: apps/backend
      run: |
        go test -race -timeout=20m -coverprofile=coverage/integration_coverage.out -covermode=atomic -v ./tests/integration/...

    - name: Run performance tests
      working-directory: apps/backend
      run: |
        go test -timeout=30m -bench=. -benchmem -v ./tests/performance/...

    - name: Generate combined coverage
      working-directory: apps/backend
      run: |
        # Merge coverage files
        echo "mode: atomic" > coverage/combined_coverage.out
        tail -n +2 coverage/unit_coverage.out >> coverage/combined_coverage.out
        tail -n +2 coverage/integration_coverage.out >> coverage/combined_coverage.out
        
        # Generate coverage report
        go tool cover -func=coverage/combined_coverage.out > coverage/coverage_report.txt
        go tool cover -html=coverage/combined_coverage.out -o coverage/coverage.html

    - name: Check coverage threshold
      working-directory: apps/backend
      run: |
        COVERAGE=$(go tool cover -func=coverage/combined_coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Coverage: ${COVERAGE}%"
        
        if (( $(echo "${COVERAGE} >= 70" | bc -l) )); then
          echo "✅ Coverage meets threshold (70%): ${COVERAGE}%"
        else
          echo "❌ Coverage below threshold: ${COVERAGE}% < 70%"
          exit 1
        fi

    - name: Generate test report
      working-directory: apps/backend
      if: always()
      run: |
        mkdir -p test-reports
        
        # Generate JUnit XML
        go test -v ./... 2>&1 | go-junit-report > test-reports/junit.xml
        
        # Generate markdown report
        cat > test-reports/test_report.md << EOF
        # Test Report - $(date)
        
        ## Environment
        - Go Version: ${{ matrix.go-version }}
        - OS: Ubuntu Latest
        - Database: MySQL 8.0
        
        ## Coverage
        $(cat coverage/coverage_report.txt)
        
        ## Files
        - Coverage HTML: coverage/coverage.html
        - JUnit XML: test-reports/junit.xml
        EOF

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: apps/backend/coverage/combined_coverage.out
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-go${{ matrix.go-version }}
        path: |
          apps/backend/coverage/
          apps/backend/test-reports/

    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Backend Tests (Go ${{ matrix.go-version }})
        path: apps/backend/test-reports/junit.xml
        reporter: java-junit

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./...'
        working-directory: apps/backend

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: apps/backend/gosec.sarif

  build:
    name: Build Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22

    - name: Build application
      working-directory: apps/backend
      run: |
        go build -v -o bin/backend ./cmd/server/
        
    - name: Test binary
      working-directory: apps/backend
      run: |
        ./bin/backend --version || echo "Binary created successfully"