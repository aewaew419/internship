version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: internship_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-internship_prod}
      POSTGRES_USER: ${DB_USER:-internship_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./database/backups:/backups
    networks:
      - internship_network
    ports:
      - "127.0.0.1:5433:5432"  # Different port to avoid conflict
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-internship_user} -d ${DB_NAME:-internship_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Backend API
  backend:
    build:
      context: ..
      dockerfile: apps/backend/Dockerfile.prod
    container_name: internship_backend
    restart: unless-stopped
    environment:
      - GO_ENV=production
      - PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-internship_prod}
      - DB_USER=${DB_USER:-internship_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      - RATE_LIMIT=${RATE_LIMIT:-100}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
    volumes:
      - ../logs/backend:/app/logs
      - ../uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - internship_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend
  frontend:
    build:
      context: ..
      dockerfile: apps/frontend/Dockerfile.prod
      args:
        - REACT_APP_API_URL=https://${DOMAIN}/api
        - REACT_APP_ENVIRONMENT=production
    container_name: internship_frontend
    restart: unless-stopped
    networks:
      - internship_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: internship_nginx
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ../logs/nginx:/var/log/nginx
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - internship_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: internship_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - internship_network
    ports:
      - "127.0.0.1:6380:6379"  # Different port to avoid conflict
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: internship_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - internship_network
    ports:
      - "127.0.0.1:9091:9090"
    profiles:
      - monitoring

  # Grafana for visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: internship_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - internship_network
    ports:
      - "127.0.0.1:3002:3000"
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  internship_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16