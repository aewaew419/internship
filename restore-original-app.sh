#!/bin/bash

echo "üîÑ Restore Original Next.js App"
echo "==============================="

VPS_IP="203.170.129.199"
VPS_USER="root"
VPS_PORT="22"

# ‡∏™‡∏£‡πâ‡∏≤‡∏á script restore ‡πÅ‡∏≠‡∏û‡∏à‡∏£‡∏¥‡∏á
cat > /tmp/restore_original.sh << 'EOF'
#!/bin/bash

echo "üõë ‡∏´‡∏¢‡∏∏‡∏î nginx..."
systemctl stop nginx

echo "üìÅ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå..."
cd /opt/internship-system
rm -rf app

echo "üì• Clone ‡πÅ‡∏≠‡∏û‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å GitHub..."
git clone https://github.com/ultramanx88/internship.git app
cd app/apps/frontend

echo "üì¶ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Node.js 18..."
curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
apt-get install -y nodejs

echo "üîß ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies..."
npm install

echo "üèóÔ∏è Build ‡πÅ‡∏≠‡∏û‡∏à‡∏£‡∏¥‡∏á..."
npm run build

echo "üìÇ Copy built files..."
rm -rf /var/www/html/*
cp -r .next/standalone/* /var/www/html/ 2>/dev/null || {
    echo "üìã Copy full Next.js build..."
    cp -r .next /var/www/html/
    cp -r public /var/www/html/
    cp package.json /var/www/html/
    cp next.config.* /var/www/html/ 2>/dev/null || true
}

echo "üê≥ ‡∏™‡∏£‡πâ‡∏≤‡∏á Docker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏û‡∏à‡∏£‡∏¥‡∏á..."
cat > /opt/internship-system/docker-compose.original.yml << 'DOCKEREOF'
version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: internship_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: internship_prod
      POSTGRES_USER: internship_user
      POSTGRES_PASSWORD: secure_password_123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - internship-network

  frontend:
    image: node:18-alpine
    container_name: internship_frontend
    working_dir: /app
    volumes:
      - ./app/apps/frontend:/app
    command: sh -c "npm install && npm run build && npm start"
    ports:
      - "3000:3000"
    networks:
      - internship-network
    environment:
      - NODE_ENV=production
      - PORT=3000

  nginx:
    image: nginx:alpine
    container_name: internship_nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx-original.conf:/etc/nginx/nginx.conf
    networks:
      - internship-network
    depends_on:
      - frontend

volumes:
  postgres_data:

networks:
  internship-network:
    driver: bridge
DOCKEREOF

echo "‚öôÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á nginx config ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Next.js..."
cat > /opt/internship-system/nginx-original.conf << 'NGINXEOF'
events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    upstream frontend {
        server frontend:3000;
    }
    
    server {
        listen 80;
        server_name _;
        
        # Next.js static files
        location /_next/static/ {
            proxy_pass http://frontend;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # Next.js app
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
}
NGINXEOF

echo "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Docker services..."
cd /opt/internship-system
docker-compose -f docker-compose.original.yml down
docker-compose -f docker-compose.original.yml up -d

echo "‚è≥ ‡∏£‡∏≠‡πÉ‡∏´‡πâ Next.js ‡∏û‡∏£‡πâ‡∏≠‡∏°..."
sleep 60

echo "üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö status..."
docker-compose -f docker-compose.original.yml ps

echo "üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Next.js..."
curl -f http://localhost:3000 > /dev/null && echo "‚úÖ Next.js: OK" || echo "‚ö†Ô∏è Next.js: Starting..."

echo "‚úÖ Restore ‡πÅ‡∏≠‡∏û‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!"
echo "üåê Next.js App: http://203.170.129.199"

EOF

echo "üì§ Upload ‡πÅ‡∏•‡∏∞ restore ‡πÅ‡∏≠‡∏û‡∏à‡∏£‡∏¥‡∏á..."
scp -P "$VPS_PORT" /tmp/restore_original.sh "$VPS_USER@$VPS_IP:/tmp/"
ssh -p "$VPS_PORT" "$VPS_USER@$VPS_IP" "chmod +x /tmp/restore_original.sh && /tmp/restore_original.sh"

echo ""
echo "üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏≠‡∏û‡∏à‡∏£‡∏¥‡∏á..."
sleep 30

if curl -s "http://$VPS_IP" | grep -q "__NEXT_DATA__\|next\|react"; then
    echo "‚úÖ ‡πÅ‡∏≠‡∏û‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß!"
    echo "üåê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: http://$VPS_IP"
else
    echo "‚ö†Ô∏è ‡πÅ‡∏≠‡∏û‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô... ‡∏•‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÉ‡∏ô 2-3 ‡∏ô‡∏≤‡∏ó‡∏µ"
fi

# Cleanup
rm -f /tmp/restore_original.sh

echo ""
echo "üéâ Restore ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!"
echo "üåê ‡πÅ‡∏≠‡∏û‡∏à‡∏£‡∏¥‡∏á: http://$VPS_IP"
echo "üì± ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡πÅ‡∏≠‡∏û‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡πÑ‡∏ß‡πâ‡πÅ‡∏ï‡πà‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡πâ‡∏ß!"